{"version":3,"sources":["components/PetComponents.js","components/Message_pets.js","components/PetForm.js","App.js","serviceWorker.js","index.js"],"names":["PetComponent","props","useState","petsReceived","setPetsReceived","species","onClick","event","console","log","target","style","backgroundColor","color","infoToParent","noise","Messages_pets","message_to_display","map","mes","i","key","PetForm","setSpecies","setNoise","setBC","setColor","onSubmit","preventDefault","newPet","giveAPetToTheParent","className","type","onChange","value","pets_ara","App","messages_ara","setMessages_ara","new_pets","setNew_pets","petInfoFromChild","info","response_pets_ara","j","pet","push","makePets","dataFromPetForm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37e88fbc.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\n\r\nconst PetComponent = props => {\r\n\r\n  // useState is a Hook function that will give back an array\r\n  // The array contains a primitive variable or an object\r\n  // depending how we initialize it\r\n  // and also will give back a function to update the state.\r\n  // (the primitive variable or an object).\r\n\r\n  const [petsReceived, setPetsReceived] = useState(1);\r\n\r\n \r\n  const pet_fun = event => {\r\n    console.log(event);         // Synthetic event\r\n    console.log(event.target);\r\n    event.target.style[\"backgroundColor\"] =  props.backgroundColor ;\r\n    event.target.style.color = props.color;\r\n    //event.target.style.color = \"white\";\r\n\r\n    setPetsReceived( petsReceived + 1);\r\n\r\n    // *** Lifting State ***\r\n    console.log('*** props =',props);\r\n\r\n    // *** The last props.infoToParent() call is the one that counts,\r\n    // *** in other words is the one that is going to be in state\r\n    // (added in the array in App.js)\r\n\r\n    // props.infoToParent(props.species);\r\n    // props.infoToParent( [ {animal:'dog'}, { animal: 'Rabbit'} ] );    \r\n    // props.infoToParent(\"=> This is a string message from the pet!!!\");\r\n\r\n    props.infoToParent(`* ${props.noise} -> The ${props.species} has been petted ${petsReceived} time(s)`);\r\n  }\r\n\r\n\r\n\r\n  return(\r\n\r\n    <fieldset>\r\n      <legend> { props.species } </legend>\r\n      <button onClick={ pet_fun  }>Pet the { props.species }</button>\r\n    </fieldset>\r\n  \r\n  );\r\n\r\n} // PetComponent functional component ***\r\n\r\n\r\nexport default PetComponent;\r\n\r\n","import React from 'react';\r\n\r\n\r\n\r\nconst Messages_pets = props => {\r\n\r\n\r\n    return(\r\n        <>\r\n            <h3> &nbsp;&nbsp; In Messages_pets ! </h3>\r\n            <h4> &nbsp;&nbsp; { props.message_to_display } </h4>\r\n            {\r\n                props.message_to_display.map( (mes, i) => \r\n                    <li key={i}> {mes} </li>\r\n                )\r\n            }\r\n\r\n        </>\r\n    );\r\n\r\n} // ** Messages Components\r\n\r\n\r\n\r\nexport default Messages_pets;\r\n","import React, {useState} from 'react';\r\n\r\n\r\nconst PetForm = props => {\r\n\r\n\r\n    const [species, setSpecies] = useState('');\r\n    const [noise, setNoise] = useState('');\r\n    const [backgroundColor, setBC] = useState('');\r\n    const [color, setColor] = useState('');\r\n\r\n\r\n    const addPet = event => {\r\n\r\n        event.preventDefault();\r\n    \r\n        // it can be written also:  let newPet = { color, noise, backgroundColor, species };\r\n        // in JS if the keys and the values are the same ! \r\n        let newPet = {\r\n          color: color,\r\n          noise: noise,\r\n          backgroundColor: backgroundColor,\r\n          species: species\r\n        }\r\n    \r\n        console.log( newPet );\r\n\r\n        // setNew_pets is not going to be used in this component in another file\r\n        // setNew_pets( [...new_pets, newPet] );\r\n\r\n        // Lifting State\r\n        props.giveAPetToTheParent ( newPet );\r\n    \r\n        setNoise('');\r\n        setSpecies('');\r\n        setBC('#ffffff');\r\n        setColor('#000000');\r\n    }\r\n\r\n\r\n    return(\r\n\r\n        <form onSubmit={ addPet } className='form-2'>\r\n          <p>Form-2</p>\r\n          <p>Species <input type=\"text\" onChange={ event => setSpecies( event.target.value ) }  value={species}/>  </p>\r\n          <p>Noise <input type=\"text\" onChange={ event => setNoise( event.target.value ) } value={noise}/>  </p>\r\n          <p>Background <input type=\"color\" onChange={ event => setBC( event.target.value ) } value={backgroundColor}/>  </p>\r\n          <p>Text Color <input type=\"color\" onChange={ event => setColor( event.target.value ) } value={color}/></p>\r\n          <input type=\"submit\" />\r\n        </form>\r\n\r\n    );\r\n\r\n\r\n} // PerForm component *************\r\n\r\n\r\nexport default PetForm;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport PetComponent from './components/PetComponents';\r\nimport Messages_pets from './components/Message_pets';\r\nimport PetForm from './components/PetForm';\r\n\r\n\r\nconst name = \"Andrew\";\r\n// App can receive a prop from the file: index.js !\r\n// then change the line App to App(props)\r\n\r\n\r\nconst pets_ara = [\r\n  { species: 'Dingo',   noise: 'noise awooooo',       backgroundColor:'darkorange', color: 'white' },\r\n  { species: 'Turtle',  noise: 'noise eating grapes', backgroundColor:'olive', color: 'yellow' },\r\n  { species: 'Penguin', noise: 'noise kikiki',        backgroundColor:'yellow', color: 'blue' }\r\n];\r\n\r\n\r\n\r\nfunction App()  {\r\n  \r\n  const [messages_ara, setMessages_ara] = useState(['Starting messages !']);\r\n  const [species, setSpecies] = useState('');\r\n  const [noise, setNoise] = useState('');\r\n  const [backgroundColor, setBC] = useState('');\r\n  const [color, setColor] = useState('');\r\n\r\n  // A new array of pets (new_pets) we will be adding our hard-coded pets_ara \r\n  // Our starting value array.\r\n  const [new_pets, setNew_pets] = useState( pets_ara );\r\n\r\n\r\n  const addPet = event => {\r\n\r\n    event.preventDefault();\r\n\r\n    // it can be written also:  let newPet = { color, noise, backgroundColor, species };\r\n    // in JS if the keys and the values are the same ! \r\n    let newPet = {\r\n      color: color,\r\n      noise: noise,\r\n      backgroundColor: backgroundColor,\r\n      species: species\r\n    }\r\n\r\n    setNew_pets( [...new_pets, newPet] );\r\n\r\n    setNoise('');\r\n    setSpecies('');\r\n    setBC('#ffffff');\r\n    setColor('#000000');\r\n\r\n  }\r\n\r\n\r\n  function makePets() {\r\n  \r\n    const response_pets_ara = [];\r\n    let j = 10;\r\n  \r\n    for (let pet of new_pets) {\r\n      response_pets_ara.push(\r\n        <PetComponent\r\n          key={j}\r\n          species={pet.species} \r\n          noise={pet.noise}\r\n          color={pet.color}\r\n          backgroundColor={pet.backgroundColor}\r\n          infoToParent={ petInfoFromChild }\r\n        />\r\n      );\r\n      j++;\r\n    }\r\n    console.log(response_pets_ara);\r\n    return response_pets_ara;\r\n  }\r\n\r\n\r\n  const petInfoFromChild = info => {\r\n    console.log('=> info =', info );\r\n    console.log('=> Function in App component.' );\r\n    console.log('=> messages_ara array =', messages_ara);\r\n    setMessages_ara([...messages_ara, info ]);\r\n  }\r\n\r\n\r\n  const youveGotPet = dataFromPetForm => {\r\n          \r\n    setNew_pets( [...new_pets, dataFromPetForm ] );\r\n\r\n  } // ** youveGotPet => function\r\n\r\n\r\n\r\n  \r\n    return (\r\n      <div>\r\n\r\n        <h2>&nbsp;&nbsp; Welcome to {name}'s petshop !</h2>\r\n\r\n        <hr />\r\n\r\n        <Messages_pets message_to_display={ messages_ara } />\r\n        \r\n\r\n        {/* *** way 1 *** */}\r\n        <p> * way 1 *</p>\r\n\r\n        <PetComponent species='Dingo' noise='noise awooooo' backgroundColor='yellow' color='darkorange' infoToParent={ petInfoFromChild }/>\r\n        <PetComponent species='Turtle' noise='noise eating grapes' backgroundColor='tomato' color='olive' infoToParent={ petInfoFromChild }/>\r\n        <PetComponent \r\n          species='Penguin' \r\n          noise='noise kikiki' \r\n          backgroundColor='blue'\r\n          color='yellow'\r\n          \r\n\r\n          infoToParent={ petInfoFromChild }\r\n        />\r\n\r\n        {/* *** way 2 *** */}\r\n        <p> * way 2 *</p>\r\n\r\n        {\r\n          makePets()\r\n        }\r\n\r\n        {/* *** way 3 *** */}\r\n        <p> * way 3 *</p>\r\n\r\n        {\r\n            new_pets.map( (pet, i) => \r\n            <PetComponent \r\n              key={i}\r\n              species={pet.species} \r\n              noise={pet.noise}\r\n              color={pet.color}\r\n              backgroundColor={pet.backgroundColor}\r\n              infoToParent={ petInfoFromChild }\r\n          />\r\n          )\r\n        }\r\n\r\n        {/* When the user finally is ready to submit this form with onSubmit, I get to tell it what i want it to do. */}\r\n        {/* I get to tell it what function i want it to run  */}\r\n\r\n        <form onSubmit={ addPet }>\r\n          <p>Form-1</p>\r\n          <p>Species <input type=\"text\" onChange={ event => setSpecies( event.target.value ) }  value={species}/>  </p>\r\n          <p>Noise <input type=\"text\" onChange={ event => setNoise( event.target.value ) } value={noise}/>  </p>\r\n          <p>Background <input type=\"color\" onChange={ event => setBC( event.target.value ) } value={backgroundColor}/>  </p>\r\n          <p>Text Color <input type=\"color\" onChange={ event => setColor( event.target.value ) } value={color}/></p>\r\n          <input type=\"submit\" />\r\n        </form>\r\n\r\n        <PetForm giveAPetToTheParent={ youveGotPet }  />\r\n\r\n      </div>\r\n    );\r\n  \r\n} // App ***\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}